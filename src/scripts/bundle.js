(function (d3$1, topojson) {
  'use strict';

  let offset = 0;
  let array = [];
  async function getData(url, query){
  	let data = await loadData(url);
    const fullArray = data.flat(1);
     let newArray =  d3.nest()
    .key(d => { return d.landLabel.value})
    .entries(fullArray);
     newArray.forEach(item => {
      item.place = item.values[0].landLabel.value;
      item.long = item.values[0].long.value;
      item.lat = item.values[0].lat.value;
       item.material = item.values[0].materialLabel.value;
    });
    console.log(newArray);
    return newArray;
  }

  async function loadData(url, query){
    for(let i = 0;i <5; i++){
      await runQuery(url);
      console.log(array);
    }
    return array;
  }

  async function runQuery(url, query){
    offset += 10000;
    const queryOffset = `

  PREFIX wgs84: <http://www.w3.org/2003/01/geo/wgs84_pos#>
  PREFIX geo: <http://www.opengis.net/ont/geosparql#>
  PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
  PREFIX gn: <http://www.geonames.org/ontology#>
  PREFIX dct: <http://purl.org/dc/terms/>

  SELECT 	?lat ?long ?landLabel ?materialLabel WHERE {
          ?cho dct:spatial ?place .
          ?place skos:exactMatch/wgs84:lat ?lat .
          ?place skos:exactMatch/wgs84:long ?long .
          ?place skos:exactMatch/gn:parentCountry ?land .
          ?land gn:name ?landLabel .
        ?cho dct:medium ?medium .
       ?medium skos:broader ?medium2 .
			?medium2 skos:broader ?medium3 .
  		?medium3 skos:broader ?medium4 .
  		?medium4 skos:broader ?mediumBroad .
  		?mediumBroad skos:prefLabel ?materialLabel .

    } LIMIT 10000 OFFSET ${offset}
  `;
     await d3.json(url +"?query="+ encodeURIComponent(queryOffset) + "&format=json")
      .then(data => data.results.bindings)
    	.then(json => {
      array.push(json);
    });
  }

  function getMap(svg, projection) {
    const pathGenerator = d3$1.geoPath().projection(projection);
    setup(svg, pathGenerator);
    d3.json('https://enjalot.github.io/wwsd/data/world/world-110m.geojson').then(data => {
      svg
      	.append('g')
        .selectAll('path')
        .data(data.features)
        .enter()
        .append('path')
        .attr('class', 'country')
        .attr('d', pathGenerator);
    });
  }

  function setup(svg, pathGenerator) {
    svg
      .append('path')
      .attr('class', 'sphere')
      .attr('d', pathGenerator({ type: 'Sphere' }));
  }

  const tooltip = d3
    .select('#root')
    .append('div')
    .attr('class', 'tooltip')
    .style('opacity', 0);

  function hover(circle, d, size){
   circle.on('mouseover', function(d) {
        d3.select(this)
          .transition()
          .duration(350)
          .attr('opacity', '0.6')
          .attr('r', d => size(d.values.length * 1.3))
          .attr('stroke', '#fff')
          .attr('stroke-width', '0.5px');

        tooltip
          .transition()
          .duration(200)
          .style('opacity', '0.8');

        tooltip
          .html('<h2>' + d.key + '</h2><p>' + d.values.length + ' objecten </p>')
          .style('left', d3.event.pageX + 15 + 'px')
          .style('top', d3.event.pageY - 30 + 'px');
  })
      .on('mouseout', function() {
        d3.select(this)
          .transition()
          .duration(350)
          .attr('opacity', '1')
          .attr('r', d => size(d.values.length))
          .attr('stroke', '0')
          .attr('stroke-width', '0');

        tooltip
          .transition()
          .duration(500)
          .style('opacity', 0);
      });
      circle.on('click', clicked);
  }
  function clicked() {
    openModal();
    closeModal();
  }

  function openModal() {
    d3$1.select('.modal')
      .transition()
      .style('left', '0')
      .style('display', 'block')
      .style('background-color', 'rgba(0,0,0,0.3)');
  }

  function closeModal() {
    d3$1.select('.close').on('click', () => {
      d3$1.select('.modal')
        .style('left', '-40%')
        .style('display', 'none')
        .style('background-color', 'rgba(0,0,0,0)');
    });
  }

  function filterCategory(data, category) {
    const svg = d3$1.select('.datavisualisation');
    let filteredArray = [];
    data.forEach(country => {
      country.values.filter(item => {
        if (item.materialLabel.value == `${category}`) {
          filteredArray.push(item);
        }
      });
    });
    let nestedArray = d3
      .nest()
      .key(d => {
        return d.landLabel.value;
      })
      .entries(filteredArray);
    nestedArray.forEach(item => {
      item.place = item.values[0].landLabel.value;
      item.long = item.values[0].long.value;
      item.lat = item.values[0].lat.value;
      item.material = item.values[0].materialLabel.value;
    });
    return nestedArray;
  }

  function filterGetCategory(data) {
    const svg = d3$1.select('.datavisualisation');
    let filteredArray = [];
    data.forEach(country => {
      country.values.forEach(item => {
      		filteredArray.push(item.materialLabel.value); 
      });
      });
    let nestedArray = d3
      .nest()
      .key(d => {
        return d;
      })
      .entries(filteredArray);
    return nestedArray;
  }

  function addLegend(data, size, maxValue, minValue) {
    const legend = d3$1.select('.legend');
    let meanValue = Math.floor((maxValue + minValue) / 3);
    
    legend.attr('width', '150').attr('height', '100');
    
    legend.selectAll('g').remove();
    
    legend
      .append('g')
      .selectAll('g')
      .data([minValue, meanValue, maxValue])
      .enter()
      .append('circle')
      .attr('cx', '75')
      .attr('cy', d => 55 - size(d))
      .attr('r', d => size(d));

    legend
    	.append('g')
      .selectAll('g')
      .data([minValue, meanValue, maxValue])
      .enter()
      .append('line')
      .attr('x1', d => 75 + size(d))
      .attr('x2', '120')
      .attr('y1', d => 55 - size(d))
      .attr('y2', d => 55 - size(d))
      .attr('stroke', 'white')
      .style('stroke-dasharray', '2,2');

    legend
   		.append('g')
      .selectAll('g')
      .data([minValue, meanValue, maxValue])
      .enter()
      .append('text')
      .text(d => d)
      .attr('x', '135')
      .attr('y', d => 45 - size(d))
      .attr('dy', '1.3em')
      .attr('alignment-baseline', 'middle')
      .style('font-size', '0.6em');
  }

  function update(data, projection) {
     const svg = d3$1.select('.datavisualisation');
    const minValue = d3.min(data, function(d) {
      return d.values.length;
    });
    const maxValue = d3.max(data, function(d) {
      return d.values.length;
    });
    const size = d3
      .scaleSqrt()
      .domain([0, maxValue])
      .range([0, 25]);
    console.log(data);
   
    const color = d3
      .scaleLinear()
      .domain([0, maxValue])
      .range(['#5BECFE', '#0481ff', '#005ab4']);
    const circle = svg.selectAll('circle');
    circle
      .transition()
      .duration(500)
      .attr('r', 0);

    circle
      .data(data)
      .exit();
      // .remove();
    
    setTimeout( () => {
    circle
      .attr('cx', d => projection([d.long, d.lat])[0])
      .attr('cy', d => projection([d.long, d.lat])[1]);

    circle
      .data(data)
      .transition()
      .duration(500)
      .attr('r', d => size(d.values.length))
      .style('fill', d => color(d.values.length));
      }, 500);
    
  	hover(circle, data, size);
   	addLegend(data, size, maxValue, minValue);
  }

  const url =
    'https://api.data.netwerkdigitaalerfgoed.nl/datasets/ivo/NMVW/services/NMVW-30/sparql';

  const svg = d3$1.select('.datavisualisation');
  const g = svg.append('g');
  const width = screen.width;
  const height = screen.height;
  const projection = d3$1.geoMercator().scale([110]);
  const zoom = d3.zoom().scaleExtent([1, 16]);

  makeSVG();

  async function makeSVG() {
    svg.attr('width', width).attr('height', height);
    getMap(svg, projection);
    let data = await getData(url);
    plotLatLong(data);
    changeInput(data);
    zoomSVG();
  }

  function plotLatLong(data) {
    console.log(data);
    const maxValue = d3.max(data, function(d) {
      return d.values.length;
    });
    const minValue = d3.min(data, function(d) {
      return d.values.length;
    });
    const color = d3
      .scaleLinear()
      .domain([0, maxValue])
      .range(['#5BECFE', '#0481ff', '#005ab4']);
    const size = d3
      .scaleSqrt()
      .domain([0, maxValue])
      .range([1, 25]);
    svg
      .selectAll('.sphere')
      .data(data)
      .enter()
      .append('circle')
      .attr('cx', d => projection([d.long, d.lat])[0])
      .attr('cy', d => projection([d.long, d.lat])[1])
      .attr('r', d => size(d.values.length))
      .style('fill', d => color(d.values.length));

    hover(svg.selectAll('circle'), data, size);
    addLegend(data, size, maxValue, minValue);
  }

  function changeInput(data) {
    let categories = filterGetCategory(data);
    console.log(categories);
    let dropdown = d3$1.select('.input-container')
      .append('select')
      .attr('id', 'categoryList');
    let options = dropdown
      .selectAll('option')
      .data(categories)
      .enter()
      .append('option');
    options
      .text(d => d.key)
      .attr('value', d => d.key)
    	.attr('id', d => d.key);
    // 	.on('click', function() {
    //   category = 'all';
    //   update(data, projection);
    // });
    
    d3$1.select('#categoryList')
    .on('change', function() {
      console.log(this.value);
      let category = this.value;
      let houtArray = filterCategory(data, category);
      update(houtArray, projection);
    });
  }

  function zoomSVG() {
    svg.call(
      zoom.on('zoom', () => {
        svg.selectAll('g').attr('transform', d3.event.transform);
        svg.selectAll('circle').attr('transform', d3.event.transform);
      })
    );
  }

}(d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,